[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "ngfx-predictor"
version = "0.1.0"
description = "Production-ready Nigerian FX forecasting platform"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "NG FX Predictor Team", email = "team@ngfx.com"},
]
keywords = ["forecasting", "machine-learning", "forex", "nigeria", "mlops"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Office/Business :: Financial",
]

dependencies = [
    # Core framework
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    
    # Data processing
    "polars>=0.20.0",
    "pandas>=2.1.0",
    "numpy>=1.25.0",
    
    # Database
    "sqlalchemy>=2.0.0",
    "asyncpg>=0.29.0",
    "psycopg2-binary>=2.9.0",
    "alembic>=1.13.0",
    
    # ML/AI
    "lightgbm>=4.1.0",
    "scikit-learn>=1.3.0",
    "optuna>=3.4.0",
    "mlflow>=2.8.0",
    "onnx>=1.15.0",
    "onnxruntime>=1.16.0",
    "shap>=0.44.0",
    "transformers>=4.36.0",
    
    # Orchestration
    "prefect>=2.14.0",
    "croniter>=2.0.0",
    
    # HTTP clients
    "httpx>=0.25.0",
    "aiohttp>=3.9.0",
    "requests>=2.31.0",
    
    # Utilities
    "python-multipart>=0.0.6",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "structlog>=23.2.0",
    "rich>=13.7.0",
    
    # Data validation
    "cerberus>=1.3.4",
    "jsonschema>=4.20.0",
    
    # File processing
    "PyPDF2>=3.0.0",
    "openpyxl>=3.1.0",
    "beautifulsoup4>=4.12.0",
    
    # Sentiment analysis
    "torch>=2.1.0",
    "sentence-transformers>=2.2.0",
    
    # Monitoring
    "prometheus-client>=0.19.0",
    "opentelemetry-api>=1.21.0",
    "opentelemetry-sdk>=1.21.0",
    
    # Scheduling
    "apscheduler>=3.10.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.5.0",
    "testcontainers>=3.7.0",
    "vcrpy>=6.0.0",
    "hypothesis>=6.90.0",
    "factory-boy>=3.3.0",
    
    # Code quality
    "ruff>=0.1.5",
    "black>=23.11.0",
    "isort>=5.12.0",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
    
    # Documentation
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.24.0",
    
    # Security
    "bandit>=1.7.0",
    "safety>=2.3.0",
    
    # Development tools
    "ipython>=8.17.0",
    "ipykernel>=6.26.0",
    "jupyter>=1.0.0",
]

[project.urls]
Homepage = "https://github.com/ngfx/predictor"
Documentation = "https://ngfx.github.io/predictor"
Repository = "https://github.com/ngfx/predictor"
Issues = "https://github.com/ngfx/predictor/issues"

[project.scripts]
ngfx-predict = "ngfx_predictor.cli:main"

[tool.hatch.version]
path = "src/ngfx_predictor/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/ngfx_predictor"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--cov=src/ngfx_predictor",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "--strict-markers",
    "--strict-config",
    "--disable-warnings",
    "-ra",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src/ngfx_predictor"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "S",   # bandit
    "T20", # flake8-print
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "S104",  # hardcoded bind all interfaces
    "S108",  # hardcoded temp file
    "S603",  # subprocess call
    "S607",  # subprocess call with shell
]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101", "S106", "S311"]
"src/ngfx_predictor/migrations/*" = ["E501"]

[tool.black]
line-length = 88
target-version = ["py311"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["ngfx_predictor"]
known_third_party = ["fastapi", "pydantic", "sqlalchemy", "polars", "lightgbm", "mlflow", "prefect"]

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "lightgbm.*",
    "optuna.*",
    "mlflow.*",
    "shap.*",
    "transformers.*",
    "torch.*",
    "sentence_transformers.*",
    "testcontainers.*",
    "vcrpy.*",
]
ignore_missing_imports = true

[tool.bandit]
exclude_dirs = ["tests", "migrations"]
skips = ["B101", "B601"] 